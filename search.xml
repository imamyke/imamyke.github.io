<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何利用Node.js及Express框架打造伺服器及靜態網頁</title>
    <url>/2023/01/11/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Node-js%E5%8F%8AExpress%E6%A1%86%E6%9E%B6%E6%89%93%E9%80%A0%E4%BC%BA%E6%9C%8D%E5%99%A8%E5%8F%8A%E9%9D%9C%E6%85%8B%E7%B6%B2%E9%A0%81/</url>
    <content><![CDATA[<h1 id="AC-學期-2-3-如何利用-Node-js-及-Express-框架打造伺服器及靜態網頁-一"><a href="#AC-學期-2-3-如何利用-Node-js-及-Express-框架打造伺服器及靜態網頁-一" class="headerlink" title="[AC 學期 2-3]如何利用 Node.js 及 Express 框架打造伺服器及靜態網頁(一)"></a>[AC 學期 2-3]如何利用 Node.js 及 Express 框架打造伺服器及靜態網頁(一)</h1><h2 id="學習建議"><a href="#學習建議" class="headerlink" title="學習建議"></a>學習建議</h2><p>在學習 Express 框架及打造伺服器之前，我們必須要先了解網際網路傳輸原理，這樣在學習框架上，就會知道為何要設定這些東西，學習上也會更如魚得水唷!</p>
<p>但這裡會偏向實作也會簡述原理，若要更深入可以在網路上查詢更多。</p>
<h2 id="用戶端與伺服器端的-HTTP-傳輸協定"><a href="#用戶端與伺服器端的-HTTP-傳輸協定" class="headerlink" title="用戶端與伺服器端的 HTTP 傳輸協定"></a>用戶端與伺服器端的 HTTP 傳輸協定</h2><h3 id="什麼是-HTTP"><a href="#什麼是-HTTP" class="headerlink" title="什麼是 HTTP ?"></a>什麼是 HTTP ?</h3><p>我們人跟人之間溝通會跟對方用聽得懂的語言做溝通，同樣地電腦設備也是，而電腦設備間溝通的語言就叫 HTTP。</p>
<ul>
<li>HTTP 簡介<ul>
<li>也稱作<strong>超文本傳輸協定</strong>，英文為<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol</li>
<li>電腦設備間互相索取文件的溝通語言</li>
</ul>
</li>
</ul>
<p>簡言之，用戶端(client)跟伺服器端(server)請求文件，或是伺服器端(server)給予用戶端(client)相應的回應時，都需要透過 HTTP 來溝通。</p>
<h3 id="HTTP-的結構是甚麼"><a href="#HTTP-的結構是甚麼" class="headerlink" title="HTTP 的結構是甚麼?"></a>HTTP 的結構是甚麼?</h3><p>在結構學習上要專注於英文的命名，會跟接下來的應用有關。</p>
<table>
<thead>
<tr>
<th align="center">HTTP Request</th>
<th align="center">HTTP Response</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Request Line(method + URL)</td>
<td align="center">Response Status</td>
</tr>
<tr>
<td align="center">Request Headers</td>
<td align="center">Response Headers</td>
</tr>
<tr>
<td align="center">Message Body</td>
<td align="center">Response Body</td>
</tr>
</tbody></table>
<ul>
<li><strong>HTTP Request</strong><ul>
<li>Request <code>Line</code>: 包含<code>Request Method</code>和<code>Request URL</code>，以及 HTTP 版本。</li>
<li>Request <code>Headers</code>: 主要是客戶端向伺服器端請求的訊息，且每一行欄位由 name: value 成對組成，最常見的如下:<ul>
<li>Host: 請求的伺服器主機名稱</li>
<li>Content-Type: 請求內容格式類型，例如純文字檔(text&#x2F;plain)、HTML 格式(text&#x2F;html)等等，有興趣的可以網下方參考資料來源查詢。</li>
</ul>
</li>
<li>Request <code>Body</code>: 通常是在用戶端以 POST 方式請求時，會把客戶的資訊放在 massage body 裡，提交給指定的 URL。</li>
</ul>
</li>
<li><strong>HTTP Response</strong><ul>
<li>Response <code>Status</code>: 包含 HTTP 版本、<a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Status">HTTP 狀態碼</a>以及狀態碼描述，狀態碼常見例如 2XX 表示伺服器成功回應，4XX 表示用戶端錯誤回應。</li>
<li>Response <code>Headers</code>: 主要是伺服器端向客戶端回應的訊息，如 Content-Type 定義回應客戶端的內容格式類型。</li>
<li>Response <code>Body</code>: 伺服器端回應給客戶的內容。</li>
</ul>
</li>
</ul>
<h3 id="URL-的結構長怎樣"><a href="#URL-的結構長怎樣" class="headerlink" title="URL 的結構長怎樣?"></a>URL 的結構長怎樣?</h3><blockquote>
<p>http:&#x2F;&#x2F;<code>www.imamyke.com:3000</code>&#x2F;categories&#x2F;?keyword&#x3D;frontend&amp;sort&#x3D;asc</p>
</blockquote>
<ul>
<li>Protocol</li>
<li>Host</li>
<li>port</li>
<li>Path</li>
<li>Parameter</li>
</ul>
<h2 id="用-Node-js-架設伺服器"><a href="#用-Node-js-架設伺服器" class="headerlink" title="用 Node.js 架設伺服器"></a>用 Node.js 架設伺服器</h2><p>現在，有了以上的知識就開始將文字轉化為程式碼打造自己的伺服器吧!</p>
<h2 id="參考資料來源"><a href="#參考資料來源" class="headerlink" title="參考資料來源"></a>參考資料來源</h2><p>ALPHA Camp: <a href="https://lighthouse.alphacamp.co/">https://lighthouse.alphacamp.co/</a></p>
<p>Content-type: <a href="https://medium.com/hobo-engineer/ricky%E7%AD%86%E8%A8%98-postman-%E5%B8%B8%E8%A6%8B%E7%9A%84-content-type-b17a75396668">https://medium.com/hobo-engineer/ricky%E7%AD%86%E8%A8%98-postman-%E5%B8%B8%E8%A6%8B%E7%9A%84-content-type-b17a75396668</a></p>
]]></content>
      <categories>
        <category>後端</category>
      </categories>
      <tags>
        <tag>expressjs</tag>
        <tag>nodejs</tag>
        <tag>http</tag>
      </tags>
  </entry>
</search>
