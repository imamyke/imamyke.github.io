<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>React — JSX用法整理</title>
    <url>/2023/01/23/React-JSX%E7%94%A8%E6%B3%95%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>jsx</tag>
        <tag>frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>React — 清單渲染(List Rendering)</title>
    <url>/2023/01/23/React-List-rendering/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>jsx</tag>
        <tag>frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>React — 條件渲染(Conditional Rendering)</title>
    <url>/2023/01/23/React-conditional-rendering/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>React — 函式元件(Functional Component)</title>
    <url>/2023/01/23/React-functional-component/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>React — Styled-component</title>
    <url>/2023/01/23/React-styled-component/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>jsx</tag>
        <tag>frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>作品集 — POS機</title>
    <url>/2023/01/23/%E4%BD%9C%E5%93%81-POS%E6%A9%9F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>作品集</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>backend</tag>
        <tag>crud</tag>
        <tag>mongodb</tag>
        <tag>mongoose</tag>
        <tag>express</tag>
        <tag>portfolio</tag>
      </tags>
  </entry>
  <entry>
    <title>React — React Router</title>
    <url>/2023/01/23/React-react-router/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>jsx</tag>
        <tag>frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>作品集 — Todolist</title>
    <url>/2023/01/23/%E4%BD%9C%E5%93%81-Todolist/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>作品集</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>backend</tag>
        <tag>crud</tag>
        <tag>mongodb</tag>
        <tag>mongoose</tag>
        <tag>express</tag>
        <tag>portfolio</tag>
      </tags>
  </entry>
  <entry>
    <title>作品集 — 兔子登入頁面</title>
    <url>/2023/01/23/%E4%BD%9C%E5%93%81-%E5%85%94%E5%AD%90%E7%99%BB%E5%85%A5%E9%A0%81%E9%9D%A2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>作品集</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>backend</tag>
        <tag>crud</tag>
        <tag>mongodb</tag>
        <tag>mongoose</tag>
        <tag>express</tag>
        <tag>portfolio</tag>
      </tags>
  </entry>
  <entry>
    <title>作品集 — 結帳程式</title>
    <url>/2023/01/23/%E4%BD%9C%E5%93%81-%E7%B5%90%E5%B8%B3%E7%A8%8B%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>作品集</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>backend</tag>
        <tag>crud</tag>
        <tag>mongodb</tag>
        <tag>mongoose</tag>
        <tag>express</tag>
        <tag>portfolio</tag>
        <tag>uiux</tag>
      </tags>
  </entry>
  <entry>
    <title>作品集 — 購物車</title>
    <url>/2023/01/23/%E4%BD%9C%E5%93%81-%E8%B3%BC%E7%89%A9%E8%BB%8A/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>作品集</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>backend</tag>
        <tag>crud</tag>
        <tag>mongodb</tag>
        <tag>mongoose</tag>
        <tag>express</tag>
        <tag>portfolio</tag>
      </tags>
  </entry>
  <entry>
    <title>作品集 — 電影清單</title>
    <url>/2023/01/23/%E4%BD%9C%E5%93%81-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE/</url>
    <content><![CDATA[<h2 id="新增、移除最愛"><a class="header-anchor" href="#新增、移除最愛"></a>新增、移除最愛</h2>
<h2 id="搜尋功能"><a class="header-anchor" href="#搜尋功能"></a>搜尋功能</h2>
<h2 id="詳細資訊"><a class="header-anchor" href="#詳細資訊"></a>詳細資訊</h2>
]]></content>
      <categories>
        <category>作品集</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>backend</tag>
        <tag>crud</tag>
        <tag>mongodb</tag>
        <tag>mongoose</tag>
        <tag>express</tag>
        <tag>portfolio</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計入門 — CSS選擇器及常用屬性</title>
    <url>/2023/01/22/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E5%85%A5%E9%96%80-CSS%E9%81%B8%E6%93%87%E5%99%A8%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%B1%AC%E6%80%A7/</url>
    <content><![CDATA[<h1>前端設計入門 — CSS選擇器及常用屬性</h1>
]]></content>
      <categories>
        <category>前端設計</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計入門 — HTML,CSS權重說明</title>
    <url>/2023/01/22/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E5%85%A5%E9%96%80-HTML,CSS%E6%AC%8A%E9%87%8D%E8%AA%AA%E6%98%8E/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端設計</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計入門 — HTML常用標籤</title>
    <url>/2023/01/22/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E5%85%A5%E9%96%80-HTML%E5%B8%B8%E7%94%A8%E6%A8%99%E7%B1%A4/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端設計</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計基礎 — Float的排版方式及清除浮動</title>
    <url>/2023/01/23/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E-float%E7%9A%84%E6%8E%92%E7%89%88%E6%96%B9%E5%BC%8F%E5%8F%8A%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8B%95/</url>
    <content><![CDATA[<h1>前端設計基礎 — Float的排版方式及清除浮動</h1>
]]></content>
      <categories>
        <category>前端設計</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>layout</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計基礎 — Position定位方式及Transform屬性</title>
    <url>/2023/01/22/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E-position%E5%AE%9A%E4%BD%8D%E6%96%B9%E5%BC%8F%E5%8F%8ATransform%E5%B1%AC%E6%80%A7/</url>
    <content><![CDATA[<h1>前端設計基礎 — Position定位方式及Transform屬性</h1>
<h2 id="Position定位屬性"><a class="header-anchor" href="#Position定位屬性"></a>Position定位屬性</h2>
<h2 id="Z-index屬性"><a class="header-anchor" href="#Z-index屬性"></a>Z-index屬性</h2>
<h2 id="HTML的層級規則"><a class="header-anchor" href="#HTML的層級規則"></a>HTML的層級規則</h2>
<h2 id="Transform屬性"><a class="header-anchor" href="#Transform屬性"></a>Transform屬性</h2>
]]></content>
      <categories>
        <category>前端設計</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計基礎 — 偽元素及偽類選擇器</title>
    <url>/2023/01/22/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E-%E5%81%BD%E5%85%83%E7%B4%A0%E5%8F%8A%E5%81%BD%E9%A1%9E%E9%81%B8%E6%93%87%E5%99%A8/</url>
    <content><![CDATA[<h1>前端設計基礎 — 偽元素及偽類選擇器</h1>
]]></content>
      <categories>
        <category>前端設計</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計基礎 — 圖片的放置方式</title>
    <url>/2023/01/23/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E-%E5%9C%96%E7%89%87%E7%9A%84%E6%94%BE%E7%BD%AE%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1>前端設計基礎 — 圖片的放置方式</h1>
]]></content>
      <categories>
        <category>前端設計</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計基礎 — CSS的彈性盒子 Flexbox</title>
    <url>/2023/01/22/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E-%E5%BD%88%E6%80%A7%E7%9B%92%E5%AD%90_flexbox/</url>
    <content><![CDATA[<h1>前端設計基礎 — CSS的彈性盒子 Flexbox</h1>
]]></content>
      <categories>
        <category>前端設計</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計基礎 — 盒模型(Box Model)及Display屬性</title>
    <url>/2023/01/22/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E-%E7%9B%92%E6%A8%A1%E5%9E%8B(box)%E5%8F%8ADisplay%E5%B1%AC%E6%80%A7/</url>
    <content><![CDATA[<h1>前端設計基礎 — 盒模型(Box Model)及Display屬性?</h1>
<h2 id="⭐-盒模型-Box-Model"><a class="header-anchor" href="#⭐-盒模型-Box-Model"></a>⭐ 盒模型(Box Model)</h2>
<h3 id="🔖-盒模型定義"><a class="header-anchor" href="#🔖-盒模型定義"></a>🔖 盒模型定義</h3>
<p>瀏覽器將<strong>每一個標籤元素都視為一個矩形的「盒模型」</strong>，而每一個盒模型都由四個屬性組成，由內而外分別為內容(content)、內距(padding)、邊界(border)及外距(margin)</p>
<span id="more"></span>
<h4 id="盒模型的組成屬性"><a class="header-anchor" href="#盒模型的組成屬性"></a>盒模型的組成屬性</h4>
  <table style="text-aligh: center;">
    <tr>
      <th>屬性(property)</th>
      <th>說明</th>
    </tr>
    <tr>
      <td>內容(content)</td>
      <td>
        <ul>
          <li>擁有「真實的內容」，例如文字、圖片或影片，我們可以依據這些真實內容來決定內容的大小</li>
          <li>也可依據 <strong>width * height</strong> 設定內容大小</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td>內距(padding)</td>
      <td></td>
    </tr>
    <tr>
      <td>邊界(border)</td>
      <td></td>
    </tr>
    <tr>
      <td>外距(margin)</td>
      <td></td>
    </tr>
  </table>
<h3 id="🔖-Box-sizing-屬性及屬性值"><a class="header-anchor" href="#🔖-Box-sizing-屬性及屬性值"></a>🔖 Box-sizing 屬性及屬性值</h3>
<ul>
<li>CSS的 <code>box-sizing</code> 屬性 (property) 定義<strong>元素寬、高的計算方式</strong>，也就是元素的寬、高<strong>是否要將內距和邊界計算進去</strong></li>
<li>CSS 語法<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: value;</span><br></pre></td></tr></table></figure>
</li>
<li>Box-sizing 的屬性值
<table>
<thead>
<tr>
<th style="text-align:center">屬性值(value)</th>
<th style="text-align:center">說明</th>
<th style="text-align:center">是否包含內距和邊界</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>content-box</code></td>
<td style="text-align:center">為<code>box-sizing</code>元素的預設值 (default)，只將內容納為寬、高計算</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center"><code>border-box</code></td>
<td style="text-align:center">元素寬、高計算包含: 內容、內距、邊界</td>
<td style="text-align:center">是</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3 id="🔖-margin的塌陷現象"><a class="header-anchor" href="#🔖-margin的塌陷現象"></a>🔖 margin的塌陷現象</h3>
<h2 id="⭐-Display屬性"><a class="header-anchor" href="#⭐-Display屬性"></a>⭐ Display屬性</h2>
<h3 id=""><a class="header-anchor" href="#"></a></h3>
<h2 id="🔎-參考資料來源"><a class="header-anchor" href="#🔎-參考資料來源"></a>🔎 參考資料來源</h2>
<p>📌 MDN: <a href="https://developer.mozilla.org/zh-TW/">https://developer.mozilla.org/zh-TW/</a></p>
<p>📌 W3SCHOOLS: <a href="https://www.w3schools.com/cssref/css3_pr_box-sizing.php">https://www.w3schools.com/cssref/css3_pr_box-sizing.php</a></p>
<p>📌</p>
<p>📌</p>
]]></content>
      <categories>
        <category>前端設計</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>layout</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計基礎 — 置中方法整理</title>
    <url>/2023/01/23/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E-%E7%BD%AE%E4%B8%AD%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1>前端設計基礎 — 置中方法整理</h1>
]]></content>
      <categories>
        <category>前端設計</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計實作 — 表單(form)元件</title>
    <url>/2023/01/23/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E-%E8%A1%A8%E5%96%AE(form)%E5%85%83%E4%BB%B6/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端設計</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>form</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計實作 — 表格(table)元件</title>
    <url>/2023/01/23/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E-%E8%A1%A8%E6%A0%BC(table)%E5%85%83%E4%BB%B6/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端設計</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>table</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計實作 — 商品卡(product card)</title>
    <url>/2023/01/22/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E5%AF%A6%E4%BD%9C%20%E2%80%94%20%E5%95%86%E5%93%81%E5%8D%A1(product_card)/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>作品集</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>portfolio</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計實作 — 單頁式網站(One Page)</title>
    <url>/2023/01/23/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E5%AF%A6%E4%BD%9C%20%E2%80%94%20%E5%96%AE%E9%A0%81%E5%BC%8F%E7%B6%B2%E7%AB%99(onepage)/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>作品集</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>portfolio</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計實作 — 色票(Colorpalette)</title>
    <url>/2023/01/23/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E5%AF%A6%E4%BD%9C%20%E2%80%94%20%E8%89%B2%E7%A5%A8(Colorpalette)/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>作品集</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>portfolio</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計觀念 — CSS撰寫習慣及命名方式</title>
    <url>/2023/01/23/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E8%A7%80%E5%BF%B5-CSS%E6%92%B0%E5%AF%AB%E7%BF%92%E6%85%A3%E5%8F%8A%E5%91%BD%E5%90%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1>前端設計觀念 — CSS撰寫習慣及命名方式</h1>
]]></content>
      <categories>
        <category>前端設計</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>前端設計觀念 — CSS樣式與資源管理</title>
    <url>/2023/01/23/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88%E8%A7%80%E5%BF%B5-CSS%E6%A8%A3%E5%BC%8F%E8%88%87%E8%B3%87%E6%BA%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1>前端設計觀念 — CSS樣式與資源管理</h1>
]]></content>
      <categories>
        <category>前端設計</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>響應式網頁(RWD)及斷點規劃</title>
    <url>/2023/01/23/%E9%9F%BF%E6%87%89%E5%BC%8F%E7%B6%B2%E9%A0%81(RWD)%E5%8F%8A%E6%96%B7%E9%BB%9E%E8%A6%8F%E5%8A%83/</url>
    <content><![CDATA[<h1>響應式網頁(RWD)及斷點規劃</h1>
]]></content>
      <categories>
        <category>前端設計</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>html</tag>
        <tag>css</tag>
        <tag>rwd</tag>
      </tags>
  </entry>
  <entry>
    <title>AC學期2-3: 自學經驗回顧</title>
    <url>/2023/01/22/AC%E5%AD%B8%E6%9C%9F2-3%E8%87%AA%E5%AD%B8%E7%B6%93%E9%A9%97%E5%9B%9E%E9%A1%A7/</url>
    <content><![CDATA[<h1>AC學期2-3: 自學經驗回顧</h1>
<h2 id="⭐-遇到的問題及解決方式"><a class="header-anchor" href="#⭐-遇到的問題及解決方式"></a>⭐ 遇到的問題及解決方式</h2>
<p>在學習 Express 框架及串接 MongoDB 資料庫時，碰到的問題主要是 <strong>「目前的資料是什麼類型?」</strong> 以及 <strong>「對專案課程及框架概念似懂非懂」</strong>，又因為不知道資料的類型，我更無法去使用相對應的方式做邏輯處理。<br>
所以，為了讓自己更理解整個專案及課程，我<strong>先地毯式將課程內容利用圖像化方式寫下重點以及資料流串接的方向</strong>。<br>
再來，因為整體專案的檔案分類是利用 MVC 架構，我在二次實作時，會<strong>提早把功能分出去</strong>，例如:</p>
<ul>
<li>先分好路由檔案，然後若有其他檔案需要導入路由，我會直接做串接，如此便省去最後再重構程式碼的時間</li>
<li>先把資料庫檔案分出去，若有其他檔案需使用資料庫檔案，便可以直接指向這個資料夾做載入</li>
</ul>
<span id="more"></span>
<p>就這樣，照著思考後的圖表以及深入了解教材的字句引導，對於專案的理解視野會突然變得超不一樣，尤其會更快發現自己的盲點!也更快去解決問題!<br>
以下，就是我如何透過這個方式去<strong>找出問題、定義問題然後一一擊破的過程</strong>。</p>
<h2 id="❓-卡關問題的突破方式"><a class="header-anchor" href="#❓-卡關問題的突破方式"></a>❓ 卡關問題的突破方式</h2>
<ol>
<li>
<p>query string, param, req.body的相異處<br>
在教案中，會使用這三種跟網址和表單送出有關的變數存取方法，一開始會把這三項使用的時機搞混，所以我會將這三項的特色列表下來，就會知道如何做應用⬇️</p>
<table>
<thead>
<tr>
<th style="text-align:center">存取方法</th>
<th style="text-align:center">表單 Method 屬性</th>
<th style="text-align:center">表現方式</th>
<th style="text-align:center">是否會出現在網址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">query string</td>
<td style="text-align:center">GET</td>
<td style="text-align:center">表單送出後，會出現在網址的 &quot; <strong>?</strong> &quot; 後面的字串</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">param</td>
<td style="text-align:center">GET</td>
<td style="text-align:center">定義在路由的變數裡，可使用 <strong>req.param</strong> 物件取得變數值</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">request body</td>
<td style="text-align:center">POST</td>
<td style="text-align:center">通常使用在較隱密的表單資訊，可使用 <strong>req.body</strong> 物件取得變數值</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>資料庫串接後，資料的存取方式及取出後的資料類型<br>
第一次操作資料庫時，對於資料庫串接不是那麼有概念。但其實…就只是<strong>將資料庫內容轉化為 JS 可以操作的資料而已</strong>，例如陣列或物件，這個觀念懂其實資料操作上就會非常得心應手!<br>
在下面來分享我在操作資料庫的思考過程⬇️</p>
<ul>
<li>
<p>如何轉換 MongoDB 資料庫的 data ?<br>
如果要將 MongoDB 資料庫的 data 轉換為可使用 JS 操作的物件，那麼必須使用 <code>lean</code> 的方法來轉換。</p>
</li>
<li>
<p>如何取得 MongoDB 資料庫的 data ? 取出來的 data 是「物件」還是「陣列」?<br>
要懂得操作資料，我覺得除了要知道要如何取出，更重要的是，要知道<strong>取出的資料類型是甚麼!</strong><br>
因為這樣才會知道要用什麼 JS 方法去<strong>操作資料</strong>!<br>
這裡列出 2 種專案會用到的<strong>取出方式和取出後的資料類型</strong>⬇️</p>
<table>
<thead>
<tr>
<th style="text-align:center">取出資料方式</th>
<th style="text-align:center">取出後的資料類型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">find()</td>
<td style="text-align:center">陣列</td>
</tr>
<tr>
<td style="text-align:center">findById()</td>
<td style="text-align:center">一個物件</td>
</tr>
</tbody>
</table>
</li>
</ul>
</li>
<li>
<p>渲染局部模板 (partial template) 的操作方式: <code>res.render()</code><br>
同樣地，有了上面第三項的認知，我們在渲染畫面時，在變數的載入會更有概念!<br>
比如說，傳入局部樣板的變數類型可以是陣列，也可以是一個物件，甚至是字串等等，我們會更容易依照畫面渲染的需求來判斷要傳入什麼樣的變數類型，例如 helper 的使用上，載入的變數是陣列或是物件</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">render</span>(局部樣板, &#123; 變數 &#125;, callback)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>下拉表單(select)的屬性<br>
為了要做<strong>排序</strong>功能，我在這裡卡觀的難題就是「下拉選單屬性不熟悉」!<br>
所以，在這裡我先去了解 <code>select</code> 和 <code>option</code> 的標籤屬性，然後再寫下思考邏輯來打造排序功能!<br>
最大的重點就是，當表單送出後，表單如何去存取 <code>select</code> 中 <code>option</code> 的值，然後再透過取出 <code>option</code> 的值來架構思考邏輯<br>
而我的排序功能邏輯是 ➡️ 「只要某一個 <code>option</code> 被<strong>選取</strong>，畫面就會依照 <code>option</code> 的<strong>排序方式</strong>做排序」<br>
細節簡述如下:</p>
<ul>
<li><code>option</code> 被選取後，表單送出後的動作為何?
<ul>
<li><code>select</code> 要先設定 <strong>name</strong> 屬性來定義變數名稱，因為任何 <code>option</code> 被選取後的值會被存在 name 裡</li>
<li><code>option</code> 要設定 <strong>value</strong> 屬性，且每個 <code>option</code> 會有不一樣的 <code>value</code></li>
<li>當表單送出後，<code>select</code> 的 <code>name</code> 會存取選取的 <code>option</code> 設定的 <code>value</code> 值，並<strong>存入 query string 的物件中</strong></li>
</ul>
</li>
<li>畫面如何依照 <code>option</code> 的排序方式改變?
<ul>
<li>利用 query string 的物件，取出被選取的 <code>option</code> 設定的 <code>value</code> 值</li>
<li>使用 mongoDB 提供的 <strong>sort 方法</strong>依照 <code>value</code> 值來做畫面的排序(這裡省略詳細的邏輯細節)</li>
</ul>
</li>
<li>如何讓被選取的 <code>option</code> 留在畫面 ?
<ul>
<li>使用 helper <code>&#123;&#123;if&#125;&#125;&#123;&#123;/if&#125;&#125;</code> 搭配 <code>option</code> 的 <strong>selected 屬性</strong>，透過邏輯判斷在畫面被排序後，選取的 option 還持續留在畫面中</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="💐-分享與展望"><a class="header-anchor" href="#💐-分享與展望"></a>💐 分享與展望</h2>
<p>在這學期中，最大的收穫是更了解表單送出後的伺服器運作，還有了解伺服器間 request 和 response 的相互溝通過程，最後，藉由 Express 框架及串接 MongoDB 資料庫的應用，打造了小型的網頁應用程式「餐廳清單」及「密碼產生器」。</p>
<p>而我最大的成就感是<strong>解出問題的過程</strong>，就像教案引導的方式，我們要將功能或是問題做拆解，然後再逐步寫出來!而這樣的方式，我在密碼產生器的專案感受很深，真的就是<strong>拆解步驟然後功能就水到渠成</strong>😄</p>
<p>之後要進入學期三了，跟自己說聲加油，我可以的💛</p>
]]></content>
      <categories>
        <category>AC學期2-3</category>
      </categories>
  </entry>
  <entry>
    <title>AC學期2-3:如何利用Node.js及Express框架打造伺服器及靜態網頁(二)</title>
    <url>/2023/01/22/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Node.js%E5%8F%8AExpress%E6%A1%86%E6%9E%B6%E6%89%93%E9%80%A0%E4%BC%BA%E6%9C%8D%E5%99%A8%E5%8F%8A%E9%9D%9C%E6%85%8B%E7%B6%B2%E9%A0%81(%E4%BA%8C)/</url>
    <content><![CDATA[<h1>[AC學期2-3]利用Node.js及Express框架打造伺服器及靜態網頁(二)</h1>
<h2 id="⭐-為何會使用-Express-框架"><a class="header-anchor" href="#⭐-為何會使用-Express-框架"></a>⭐ 為何會使用 Express 框架 ?</h2>
<ol>
<li>Express 是極簡的 Node.js 網路框架 (Web framework)</li>
<li>提供大量的 HTTP 模組程式方法、中介軟體 (middleware) 及路由系統</li>
<li>引用樣板引擎 (template engine) 打造網頁前端頁面</li>
<li>可以串接資料庫並可直接以 JavaScript 來操作資料庫</li>
</ol>
<p>以上為 Express 框架最大的四個特色，我們會逐步依照下方學習重點來學習使用方式!</p>
<span id="more"></span>
<h2 id="💎-Express-框架學習重點"><a class="header-anchor" href="#💎-Express-框架學習重點"></a>💎 Express 框架學習重點</h2>
<p>✅ <strong>👉利用 Express 框架建立伺服器</strong><br>
🔲 <strong>使用 express.Router 建立路由器及多種使用方法</strong><br>
🔲 <strong>動態路由 (param) 的應用</strong><br>
🔲 <strong>Express 的靜態檔案 (static files) 放置方法</strong><br>
🔲 <strong>使用模板引擎 (template engine) 渲染前端畫面</strong><br>
🔲 <strong>模板引擎 (template engine) 的常用 Helpers 使用</strong><br>
🔲 <strong>網頁搜尋功能怎麼寫? 介紹網址上的 Query string!</strong><br>
🔲 <strong>送出表單: GET 與 POST 的差別</strong><br>
🔲 <strong>表單送出後內容跑去哪? 跑進 Request body 裡!</strong><br>
🔲 <strong>基礎資料操作功能: CRUD</strong><br>
🔲 <strong>路由語意化: RESTful method</strong><br>
🔲 <strong>MongoDB 資料庫串接</strong><br>
🔲 <strong>網頁排序功能怎麼寫? MongoDB的進階應用</strong><br>
🔲 <strong>下拉表單的 Onchange 屬性(另外寫專案)</strong></p>
<h2 id="📚-學習-MVC-架構"><a class="header-anchor" href="#📚-學習-MVC-架構"></a>📚 學習 MVC 架構</h2>
<p>等等，進入Express框架之前，我們要先了解什麼是 MVC 架構。<br>
因為接下來會有大量資料文件的串接過程，有了 MVC 設計模式的概念，就可以快速理解程式碼間「檔案分工」的概念!</p>
<p>MVC 架構簡單來說就像是 <strong>「公司各部門的互相合作」</strong> ，當公司事情、業務越多，不太會讓每個人身兼多職，而是將業務合併或分類並為此設立部門，而部門間會因應公司的運作而互相配合。</p>
<p>那麼程式碼也是一樣，當在同一份檔案越寫越多程式碼時，若檔案越大會使程式碼較不易閱讀且很難維護，所以我們會將程式碼依特性做分類並另外建立資料夾放置做管理，而MVC 架構即是將程式碼分類為資料管理(<strong>M</strong>odel)、介面畫面的呈現(<strong>V</strong>iew)及程式動作指派的邏輯(<strong>C</strong>ontroller)，整理如下表 ⬇️</p>
<ul>
<li>
<p>MVC 架構及意義</p>
<table>
<thead>
<tr>
<th style="text-align:center">架構</th>
<th style="text-align:center"><strong>M</strong>odel</th>
<th style="text-align:center"><strong>V</strong>iew</th>
<th style="text-align:center"><strong>C</strong>ontroller</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">翻譯</td>
<td style="text-align:center">模型</td>
<td style="text-align:center">視圖</td>
<td style="text-align:center">控制器</td>
</tr>
<tr>
<td style="text-align:center">意義</td>
<td style="text-align:center">放資料的地方</td>
<td style="text-align:center">管理畫面的呈現</td>
<td style="text-align:center">與使用者間的互動邏輯</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>使用 MVC 目的</p>
<ul>
<li>當專案規模變大時，透過 MVC 架構將程式碼獨立出來並歸類到資料夾裡，可以更好地閱讀及維護。</li>
</ul>
</li>
</ul>
<blockquote>
<p>MVC 提供的協助是「<strong>把不同意義的程式碼放在不同的檔案裡並彼此各司其職分工合作</strong>」🏃</p>
</blockquote>
<h2 id="✏️-利用-Express-框架建立伺服器"><a class="header-anchor" href="#✏️-利用-Express-框架建立伺服器"></a>✏️ 利用 Express 框架建立伺服器</h2>
<h3 id="1️⃣-安裝Express"><a class="header-anchor" href="#1️⃣-安裝Express"></a>1️⃣ 安裝Express</h3>
<p>🚩 <strong>Step1. 建立 Express 資料夾</strong></p>
<ul>
<li>
<p>打開終端機，使用 <code>mkdir</code> 指令，並建立 <code>express_project</code> 的專案資料夾</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> express_project</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>再利用 <code>cd</code> 進入資料夾內</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> express_project</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>🚩 <strong>Step2. 產生 package.json 檔案</strong></p>
<ul>
<li>
<p>利用 <code>npm init</code> 指令產生 <code>package.json</code> 的檔案，裡面會記錄關於專案的相關資訊</p>
</li>
<li>
<p>而 <code>-y</code> 是為了快速把 <code>package.json</code> 快速建立好，並跳過許多手動設定，之後有需要再修改即可</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>🚩 <strong>Step3. 利用 npm 安裝 Express</strong></p>
<ul>
<li>
<p>利用 <code>npm install</code> 或 <code>npm i</code> (縮寫)指令下載 Express 套件會看到專案資料夾產生 <code>node_modules</code> 的資料夾，裡面會放置透過 npm 下載的套件</p>
</li>
<li>
<p>若有指定版本，可使用 <code>npm install [套件名稱]@[版本號]</code>，若沒有指定版本會<strong>預設下載最新版本</strong></p>
</li>
<li>
<p>打開 <code>package.json</code> 會發現 <code>dependencies</code> 裡面出現 express 的套件，表示安裝成功囉!</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install express</span><br><span class="line">npm i express</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2️⃣-定義和伺服器有關的變數"><a class="header-anchor" href="#2️⃣-定義和伺服器有關的變數"></a>2️⃣ 定義和伺服器有關的變數</h3>
<p>🚩 <strong>Step1. 載入 Express</strong></p>
<ul>
<li>
<p>在專案資料夾 <code>express_project</code> 新增名為 <code>app.js</code> 的檔案</p>
</li>
<li>
<p>利用 <code>require</code> 載入 Express，並存在 <code>express</code> 的變數裡</p>
</li>
<li>
<p>再定義 <code>app</code> 來使用 Express 框架提供的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>🚩 <strong>Step2. 設定伺服器的相關變數</strong></p>
<ul>
<li>
<p>Express 的伺服器相關變數設定簡化</p>
<ul>
<li><strong>不需要再載入 HTTP 模組</strong> ➡️ 如開頭所述，因為 Express 內部已載入 HTTP 模組</li>
<li><strong>不需要特別設定主機名稱</strong> ➡️ Express 預設為 <code>localhost</code></li>
</ul>
</li>
<li>
<p><strong>只要設定連接埠號 (port) !</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3️⃣-設定伺服器處理請求和回應的動作"><a class="header-anchor" href="#3️⃣-設定伺服器處理請求和回應的動作"></a>3️⃣ <strong>設定伺服器處理請求和回應的動作</strong></h3>
<ul>
<li><strong>不用設定回應的 HTTP 狀態碼 (status code)</strong> ➡️ Express 會自己判斷 HTTTP 狀態碼</li>
<li><strong>不用設定內容格式類型 (Content-Type)</strong> ➡️ Express 會自己判斷內容格式類型
<ul>
<li>
<p>這邊利用 <code>res.send()</code> 方法回傳瀏覽器顯示的內容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;This is my Express server!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>若要回傳 HTML 格式，可以這樣做 ⬇️</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;This is my Express server!&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>’ / ’ 是<strong>根目錄</strong>，也就是網址為<a href="http://localhost:3000/">http://localhost:3000.com</a>的頁面</p>
</blockquote>
<p>💡 <strong>重點說明:</strong></p>
<ul>
<li>
<p><strong>使用 Express 方法:</strong></p>
<ul>
<li>
<p><code>app.get</code> ➡️ 定義到哪個路由時，瀏覽器要給予什麼樣的回應</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;路徑&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 匿名函式</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>匿名函式可以取得瀏覽器發進來的請求 (request)， 和我們的伺服器想傳送的回應 (response)</p>
</blockquote>
<ul>
<li>
<p><code>res.send</code> ➡️ 把內容傳送回去給瀏覽器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;回應的內容&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="4️⃣-啟動並監聽-listen-伺服器"><a class="header-anchor" href="#4️⃣-啟動並監聽-listen-伺服器"></a>4️⃣ <strong>啟動並監聽(listen)伺服器</strong></h3>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The server is listening on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>成功啟動後，可以在終端機看到 <code>The server is listening on http://localhost:3000</code>，接下來就可以打開瀏覽器輸入 <code>http://localhost:3000</code>，就看到伺服器回應我們的內容 <code>This is my Express server</code> !!!</p>
<p>💡 <strong>重點說明:</strong></p>
<ul>
<li>
<p><strong>使用 Express 方法: app.listen</strong></p>
<ul>
<li>
<p>裡面的匿名函式: 當伺服器啟動時，這個函式就會被執行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 匿名函式</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>🎉🎉🎉耶!恭喜成功完成 Express 伺服器，接下來我們就正式開始打造我們的 Express 應用程式!💗</p>
<h2 id="🔎-參考資料來源"><a class="header-anchor" href="#🔎-參考資料來源"></a>🔎 參考資料來源</h2>
<p>📌 ALPHA Camp: <a href="https://lighthouse.alphacamp.co/">https://lighthouse.alphacamp.co/</a></p>
<p>📌 Express 官網: <a href="https://expressjs.com/">https://expressjs.com/</a></p>
]]></content>
      <categories>
        <category>AC學期2-3</category>
      </categories>
      <tags>
        <tag>expressjs</tag>
        <tag>nodejs</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>AC學期2-3:如何利用Node.js及Express框架打造伺服器及靜態網頁(一)</title>
    <url>/2023/01/13/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Node-js%E5%8F%8AExpress%E6%A1%86%E6%9E%B6%E6%89%93%E9%80%A0%E4%BC%BA%E6%9C%8D%E5%99%A8%E5%8F%8A%E9%9D%9C%E6%85%8B%E7%B6%B2%E9%A0%81(%E4%B8%80)/</url>
    <content><![CDATA[<h1>[AC學期2-3]利用Node.js及Express框架打造伺服器及靜態網頁(一)</h1>
<h2 id="⭐-學習建議"><a class="header-anchor" href="#⭐-學習建議"></a>⭐ 學習建議</h2>
<p>在學習 Express 框架及打造伺服器之前，我們必須要<strong>先了解網際網路傳輸原理</strong>，這樣在學習框架上，就會<strong>知道為何要設定這些東西</strong>，學習上也會更如魚得水唷!<br>
但這裡會偏向實作也會簡述原理，若要更深入可以在網路上或透過最下方參考資料查詢更多。</p>
<span id="more"></span>
<h2 id="💻-用戶端與伺服器端的-HTTP-傳輸協定"><a class="header-anchor" href="#💻-用戶端與伺服器端的-HTTP-傳輸協定"></a>💻 用戶端與伺服器端的 HTTP 傳輸協定</h2>
<h3 id="1️⃣-什麼是-HTTP"><a class="header-anchor" href="#1️⃣-什麼是-HTTP"></a>1️⃣ 什麼是 HTTP ?</h3>
<p>我們人跟人之間溝通會跟對方用聽得懂的語言做溝通，同樣地電腦設備也是，而電腦設備間溝通的語言就叫 HTTP。</p>
<p>📚 <strong>HTTP 簡介</strong></p>
<ul>
<li>也稱作<strong>超文本傳輸協定</strong>，英文為<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol</li>
<li>電腦設備間互相索取文件的溝通語言</li>
</ul>
<blockquote>
<p>簡單來說，用戶端(client)跟伺服器端(server)請求文件，或是伺服器端(server)給予用戶端(client)相應的回應時，都需要透過 HTTP 來溝通。</p>
</blockquote>
<h3 id="2️⃣-HTTP-的組成結構是什麼"><a class="header-anchor" href="#2️⃣-HTTP-的組成結構是什麼"></a>2️⃣ HTTP 的組成結構是什麼?</h3>
<p>在 HTTP 組成結構學習上要專注於英文的命名，會跟接下來的應用有關唷!</p>
<table>
<thead>
<tr>
<th style="text-align:center">HTTP Request</th>
<th style="text-align:center">HTTP Response</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Request Line(method + URL)</td>
<td style="text-align:center">Response Status</td>
</tr>
<tr>
<td style="text-align:center">Request Headers</td>
<td style="text-align:center">Response Headers</td>
</tr>
<tr>
<td style="text-align:center">Request Body</td>
<td style="text-align:center">Response Body</td>
</tr>
</tbody>
</table>
<p>📌 <strong>HTTP Request</strong></p>
<ul>
<li>
<p><strong>Request <code>Line</code>:</strong> 包含<code>Request Method</code>和<code>Request URL</code>，以及 HTTP 版本。</p>
<ul>
<li>
<p><strong>Request Method:</strong> 常見如下表。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Method</th>
<th style="text-align:center">說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>GET</strong></td>
<td style="text-align:center">讀取資料</td>
</tr>
<tr>
<td style="text-align:center"><strong>POST</strong></td>
<td style="text-align:center">新增資料</td>
</tr>
<tr>
<td style="text-align:center"><strong>PUT</strong></td>
<td style="text-align:center">修改資料(如果沒有該筆資料存在，就會新增資料)</td>
</tr>
<tr>
<td style="text-align:center"><strong>PATCH</strong></td>
<td style="text-align:center">修改資料</td>
</tr>
<tr>
<td style="text-align:center"><strong>DELETE</strong></td>
<td style="text-align:center">刪除資料</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><strong>Request URL:</strong> 用戶端請求資源的伺服器網址。</p>
</li>
</ul>
</li>
<li>
<p><strong>Request <code>Headers</code>:</strong> 主要是客戶端向伺服器端請求的訊息，且每一行欄位內容由 <code>name: value</code> 成對組成，最常見的 Header 如下:</p>
<ul>
<li><strong>Host:</strong> 請求的伺服器主機名稱。</li>
<li><strong>Content-Type:</strong> 請求內容格式類型，例如純文字檔(text/plain)、HTML 格式(text/html)等等，有興趣的可以網下方參考資料來源查詢。</li>
</ul>
</li>
<li>
<p><strong>Request <code>Body</code>:</strong> 通常是在用戶端以 POST 方式請求時，會把客戶的資訊放在 Request body 裡，提交給指定的 URL。</p>
</li>
</ul>
<img src="https://images.zapier.com/storage/photos/4717d012f26dc6a4928e0d025102af7f.png?format=jpg" width="50%">
<p>📌 <strong>HTTP Response</strong></p>
<ul>
<li><strong>Response <code>Status</code>:</strong> 包含 HTTP 版本、<a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Status">HTTP 狀態碼</a>以及狀態碼描述，狀態碼常見例如 <strong>2XX</strong> 表示伺服器<strong>成功回應</strong>，<strong>4XX</strong>表示用戶端<strong>錯誤回應</strong>。</li>
<li><strong>Response <code>Headers</code>:</strong> 主要是伺服器端向客戶端回應的訊息，如 Content-Type 定義回應客戶端的內容格式類型。</li>
<li><strong>Response <code>Body</code>:</strong> 伺服器端回應給客戶的內容。</li>
</ul>
<img src="https://images.zapier.com/storage/photos/df8b6d09ab35aac47c1fb7b020a42d61.png?format=jpg" width="50%">
<blockquote>
<p>📝 <strong>總結:</strong><br>
HTTP Request 由四元素組成: <strong>URL、Method、Headers、Body</strong><br>
HTTP Respond 由三元素組成: <strong>Status code、Headers、Body</strong></p>
</blockquote>
<h3 id="3️⃣-URL-的結構長怎樣"><a class="header-anchor" href="#3️⃣-URL-的結構長怎樣"></a>3️⃣ URL 的結構長怎樣?</h3>
<p><strong><font color=#0000FF>http://</font><font color=#FF6600><a href="http://www.imamyke.com">www.imamyke.com</a></font>:3000<font color=#008000>/categories</font><font color=#800080>/?keyword=frontend&amp;sort=asc</font></strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">URL 結構</th>
<th style="text-align:left">說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong><font color=#0000FF>Protocol</font></strong></td>
<td style="text-align:left">傳輸協定，不一定是 http 或 https，也有可能是 ssh、ftp、mailto、file</td>
</tr>
<tr>
<td style="text-align:center"><strong><font color=#FF6600>Host</font></strong></td>
<td style="text-align:left">主機名稱，也就是網域名稱</td>
</tr>
<tr>
<td style="text-align:center"><strong>port</strong></td>
<td style="text-align:left">通訊埠，通常會隱藏起來</td>
</tr>
<tr>
<td style="text-align:center"><strong><font color=#008000>Path</font></strong></td>
<td style="text-align:left">檔案路徑</td>
</tr>
<tr>
<td style="text-align:center"><strong><font color=#800080>Parameter</font></strong></td>
<td style="text-align:left">使用 <strong><code>?</code></strong> 來表示參數的開頭，並用 <strong><code>&amp;</code></strong> 分隔不同的項目， <code>?</code> 之後的字串稱為 <strong>query string</strong>，<br>這個名詞先筆記一下，後面會學習到怎麼使用!<br>在這裡 <code>keyword</code> 和 <code>sort</code> 表示參數，<code>frontend</code> 和 <code>asc</code> 表示參數的值</td>
</tr>
</tbody>
</table>
<h2 id="✏️-一起實作吧-用-Node-js-架設伺服器"><a class="header-anchor" href="#✏️-一起實作吧-用-Node-js-架設伺服器"></a>✏️ 一起實作吧!用 Node.js 架設伺服器</h2>
<p>現在，有了以上的知識就開始將文字轉化為程式碼打造自己的伺服器吧!</p>
<p>順道一提，實際做完之後可以對照著 HTTP 結構去思考為何會這樣建立伺服器唷!</p>
<h3 id="1️⃣-定義和伺服器有關的變數"><a class="header-anchor" href="#1️⃣-定義和伺服器有關的變數"></a>1️⃣ <strong>定義和伺服器有關的變數</strong></h3>
<p>🚩 <strong>Step1. 載入 Node.js 的 HTTP 模組</strong></p>
<p>首先，當然是要讓我們的伺服器會跟其他電腦設備「說話」，那個溝通語言就是 HTTP !</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>載入之後我們把 HTTP 模組存成 <code>http</code> 這個變數，之後就可以利用這個變數來使用 HTTP 模組的方法。</p>
<p>🚩 <strong>Step2. 設定伺服器的相關變數</strong></p>
<p>再來，我們要定義伺服器的主機位置，這樣伺服器之間才會知道資料要傳送到哪。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;localhost&quot;</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br></pre></td></tr></table></figure>
<h3 id="2️⃣-設定伺服器處理請求和回應的動作"><a class="header-anchor" href="#2️⃣-設定伺服器處理請求和回應的動作"></a>2️⃣ <strong>設定伺服器處理請求和回應的動作</strong></h3>
<p>🚩 <strong>Step1. 使用 HTTP 模組方法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 請求和回應的動作都會在這邊</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>💡 <strong>重點說明:</strong></p>
<ul>
<li>
<p><strong>使用 HTTP 模組方法: createServer</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http.<span class="property">createServer</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>變數命名</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">請求(Request)</th>
<th style="text-align:center">回應(Response)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">req</td>
<td style="text-align:center">res</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>🚩 <strong>Step2. 設定回應的 HTTP 狀態碼 (status code) 和內容格式類型 (Content-Type)</strong></p>
<p>還記得 Response headers 會設定內容格式嗎? 有沒有覺得函式的命名非常語意化 😇</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="property">statusCode</span> = <span class="number">200</span> <span class="comment">// 新增這裡</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>) <span class="comment">// 新增這裡</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>💡 <strong>重點說明:</strong></p>
<ul>
<li>
<p><strong>使用 HTTP 模組方法: setHeader</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Header欄位名&quot;</span>, <span class="string">&quot;Header欄位值&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>狀態碼: statusCode</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="property">statusCode</span> = 回應狀態碼</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>🚩 <strong>Step3. 伺服器端回應給客戶的內容</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="property">statusCode</span> = <span class="number">200</span>;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">`This is my first server`</span>) <span class="comment">// 新增這裡</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>💡 <strong>重點說明:</strong></p>
<ul>
<li><strong>使用 HTTP 模組方法: end</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">end</span>(<span class="string">&quot;依照Content-Type的格式回應內容&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><strong>如何回傳 HTML?</strong><br>
這邊我們回應的 Content-Type 是使用純文字 text/plain 表示。<br>
如果要回傳成 HTML，我們可以這樣改寫 ⬇️<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html&quot;</span>)</span><br><span class="line">res.<span class="title function_">end</span>(<span class="string">`&lt;h1&gt;This is my first server&lt;/h1&gt;`</span>) <span class="comment">// 使用模板字串唷!</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3️⃣-啟動並監聽-listen-伺服器"><a class="header-anchor" href="#3️⃣-啟動並監聽-listen-伺服器"></a>3️⃣ <strong>啟動並監聽(listen)伺服器</strong></h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The server is listening on http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>成功啟動後，可以在終端機看到 <code>The server is listening on http://localhost:3000</code>，接下來就可以打開瀏覽器輸入 <code>http://localhost:3000</code>，就看到伺服器回應我們的內容 <code>This is my first server</code> !!!</p>
<p>💡 <strong>重點說明:</strong></p>
<ul>
<li><strong>使用 HTTP 模組方法: server.listen</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 匿名函式</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>🎉🎉🎉耶!恭喜成功完成你的第一個伺服器，我們帶著這些觀念去挑戰和學習 Express 框架吧!💗</p>
<h2 id="🔎-參考資料來源"><a class="header-anchor" href="#🔎-參考資料來源"></a>🔎 參考資料來源</h2>
<p>📌 ALPHA Camp: <a href="https://lighthouse.alphacamp.co/">https://lighthouse.alphacamp.co/</a></p>
<p>📌 Content-type: <a href="https://www.runoob.com/http/http-content-type.html">https://www.runoob.com/http/http-content-type.html</a></p>
<p>📌 HTTP: <a href="https://zapier.com/learn/apis/chapter-2-protocols/">https://zapier.com/learn/apis/chapter-2-protocols/</a></p>
<p>📌 Node.js: <a href="https://nodejs.org/api/http.html">https://nodejs.org/api/http.html</a></p>
]]></content>
      <categories>
        <category>AC學期2-3</category>
      </categories>
      <tags>
        <tag>expressjs</tag>
        <tag>nodejs</tag>
        <tag>http</tag>
      </tags>
  </entry>
</search>
